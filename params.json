{"name":"Behave-rest-doc","tagline":"behave-rest-doc","body":"# Introduction\r\n\r\nThis documentation uses curl to make calls to our REST API and shows you how to use the service.\r\n\r\n1. [Players](#players)\r\n  * [Identify](#identify)\r\n  * [Retrieve a Player](#retrieve-a-player)\r\n  * [Add Identity (Social)](#add-identity)\r\n  * [Remove Identity (Social)](#remove-identity)\r\n2. [Behaviours](#behaviours)\r\n  * [Simple tracking](#simple-tracking)\r\n  * [Contextual tracking](#contextual-tracking)\r\n  * [Using the tracking response](#using-the-tracking-response)\r\n3. [Leaderboards](#leaderboards)\r\n  * [Getting leaderboard current results](#getting-leaderboard-current-results)\r\n  * [Getting leaderboard results for a specific player](#getting-leaderboard-results-for-a-specific-player)\r\n  * [Creating a Leaderboard](#creating-a-leaderboard)\r\n  * [Creating a Leaderboard with rewards](#creating-a-leaderboard-with-rewards)\r\n  * [Deleting a Leaderboard](#deleting-a-leaderboard)\r\n4. [Badges](#badges)\r\n  * [Getting unlocked badges of a player](#getting-unlocked-badges-of-a-player)\r\n  * [Getting locked badges of a player](#getting-locked-badges-of-a-player)\r\n  * [Creating a Badge](#creating-a-badge)\r\n  * [Updating a Badge](#updating-a-badge)\r\n  * [Deleting a Badge](#deleting-a-badge)\r\n5. [Levels](#levels)\r\n  * [Creating a Level](#creating-a-level)\r\n6. [Creating badges, levels, leaderboards using the API]\r\n\r\n## Players\r\n\r\n### Identify\r\n\r\nYou need to identify your users at least once so their player profiles can be created.\r\nIf you identify a user multiple times with the same id, the existing player will be updated and returned instead of being created. You can optionally attribute some traits to the player.\r\n\r\n**Note:** If you start tracking behaviours of a player that you have not yet identified, it will be automatically identified for you. The Identify API is just the regular way to create/update your players profiles in case you want to add extra traits to them (name, email, picture, ...)\r\n\r\n* **Method:** POST\r\n* **Endpoint:** /players/:reference_id/identify\r\n* **Parameters:**\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| ------:|\r\n| traits        | Object | (optional) The custom traits you assign to the player. You can use any key-value pair to give attributes to the player. The 2 special fields: ``name`` and ``picture`` will be used as display information from the admin interface. We recommend to specify them if you can.  |\r\n| timestamp     | Number | (optional) A **unix timestamp** that tells when this identification happened. **Make sure you specify a timestamp when importing data**. We will use the server's current time by default. |\r\n\r\nExample:\r\n\r\n```bash\r\n$ curl http://api.behave.io/players/42/identify\r\n-H \"X-Behave-Api-Token:YOUR_API_TOKEN\",\r\n-H \"Content-Type:application/json\"\r\n-d '{\r\n  \"traits\": {\r\n    \"email\": \"olivier@behave.io\",\r\n    \"name\": \"Olivier Thierry\",\r\n    \"picture\": \"http://url_to_picture\",\r\n    \"foo\": \"bar\"\r\n  }\r\n}'\r\n```\r\n\r\nthe returned Player has the following attributes\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| ------:|\r\n| reference_id  | String | The custom unique id you have specified to identify this player |\r\n| points        | Number | The number of points of the player (default to 0) |\r\n| level         | Object | The current level of the player |\r\n| traits        | Object | The custom traits you have given to the player |\r\n\r\n### Retrieve a player\r\n\r\nSometimes you want to retrieve a player's profile without having to identify() him. You can retrieve a player by sending a GET request.\r\n\r\n* **Method:** POST\r\n* **Endpoint:** /players/:reference_id\r\n* **Parameters:**\r\n\r\nExample:\r\n\r\n```bash\r\n$ curl http://api.behave.io/players/42 -H \"X-Behave-Api-Token:YOUR_API_TOKEN\"\r\n{\r\n  \"data\": {\r\n    \"reference_id\": \"42\",\r\n    \"points\": 4244,\r\n    \"level\": {\r\n      name: \"Newbie\",\r\n      message: \"\",\r\n      nextLevelPoints: 5000,\r\n      progress: 84.88\r\n    }\r\n    \"traits\": {\r\n      \"email\": \"olivier@behave.io\",\r\n      \"name\": \"Olivier Thierry\",\r\n      \"picture\": \"http://url_to_picture\",\r\n      \"foo\": \"bar\"\r\n    }  \r\n  }\r\n}\r\n```\r\n### Add Identity\r\n\r\nYou can easily bind social providers (facebook, twitter, yammer, and more soon enought) to your players using the identities API.\r\n\r\n* **Method:** POST\r\n* **Endpoint:** /players/:player_id/identities\r\n* **Parameters:**\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| -----:|\r\n| provider      | String | **Required**. Provider key (\"facebook\", \"twitter\", \"yammer\")  |\r\n| reference_id  | String | **Required**. The id of the player in the provider's servers |\r\n\r\nFor example if my users logs in my app using facebook, I can do the following (make sure you identify the player before)\r\n\r\n```bash\r\n$ curl http://api.behave.io/players/42/identities\r\n-H \"X-Behave-Api-Token:YOUR_API_TOKEN\"\r\n-H \"Content-Type:application/json\"\r\n-d '{\r\n \"provider\": \"facebook\",\r\n \"reference_id\": \"user_id_in_facebook_servers\"\r\n}'\r\n```\r\n\r\nIt will bind the facebook user id to the player. If you haven't specified a picture or a name in your players traits, we will grab the ones from facebook **without asking any additional permissions**.\r\n\r\nNOTE: If your app has asked for friends list read permission on Facebook, you will be able to make leaderboards \"between friends\" without any additional code.\r\n\r\nNOTE2: If your app has asked for write permissions (like posting on opengraph on behalf of the user) you will be able to automatically share badge unlocks and more trough the opengraph without any additional code when you want it.\r\n\r\n### Remove Identity\r\n\r\n* **Method:** DELETE\r\n* **Endpoint:** /players/:player_id/identities/:provider\r\n\r\n```bash\r\n$ curl http://api.behave.io/players/42/identities/facebook\r\n-X DELETE\r\n-H \"X-Behave-Api-Token:YOUR_API_TOKEN\"\r\n```\r\n\r\n## Behaviours\r\n\r\nYou need to track your players behaviours if you want to reward them for doing so! Tracking can be either **simple** or **contextual**. You can specify ANY key value pairs to describe the context to which the behaviour was taken (See examples below):\r\n\r\n* **Method:** POST\r\n* **Endpoint:** /players/:player_id/track\r\n* **Parameters:**\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| -----:|\r\n| verb      | String | The name of the behaviour you are tracking  |\r\n| context      | Object | (optional) You can specify ANY key value pairs to describe the context to which the behaviour was taken. Optionally, A special field ``timestamp`` **(unix timestamp)** defines when was this behaviour taken. **Make sure you specify a timestamp when importing data**. We will use the server's current time by default. |\r\n\r\n### Simple tracking\r\n\r\n```bash\r\n$ curl http://api.behave.io/players/42/track\r\n-H \"X-Behave-Api-Token:YOUR_API_TOKEN\"\r\n-H \"Content-Type:application/json\"\r\n-d '{\r\n \"verb\": \"login\"\r\n}'\r\n```\r\n### Contextual tracking\r\n\r\n```bash\r\n$ curl http://api.behave.io/players/42/track\r\n-H \"X-Behave-Api-Token:YOUR_API_TOKEN\"\r\n-H \"Content-Type:application/json\"\r\n-d '{\r\n \"verb\": \"check-in\",\r\n \"context\": {\r\n   \"placeId\": \"42\",\r\n   \"with_friends\": [\"43\", \"44\", \"45\"]\r\n }\r\n}'\r\n```\r\n\r\n### Using the tracking response\r\n\r\nWhen you track a user behaviour, you get back a response of basically what happened. The response contains the actions that the tracking has triggered (from your [recipes](http://dashboard.behave.io/recipes)).\r\n\r\nThe response **always contains 3 attributes**.\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| -----:|\r\n| badges         | Array[Object] | The unlocked badges |\r\n| points        | Object | With 2 attributes: ``earned`` and ``balance``. ``earned`` is the number of points the user earned by taking the action or 0 if no points earned, ``balance`` is the updated balance of the player points |\r\n| level | Object | The current level of the player, containing the updated progress to the next level |\r\n| leaderboards  | Array[Object] |  Leaderboard updates (if any,  empty otherwise). See bellow for detailed structure |\r\n\r\nExample:\r\n\r\n```bash\r\n$ curl http://api.behave.io/players/42/track\r\n-H \"X-Behave-Api-Token:YOUR_API_TOKEN\"\r\n-H \"Content-Type:application/json\"\r\n-F '{\r\n \"verb\": \"check-in\",\r\n \"context\": {\r\n   \"placeId\" : \"42\"\r\n   \"placeName\" : \"Deloitte\",\r\n   \"with_mates\" : [1, 33, 42, 54]\r\n }\r\n}'\r\n\r\n# Example Response\r\n{\r\n  \"data\": {\r\n    \"points\": {\r\n      # Points earned due to action\r\n      \"earned\": 42,\r\n      # Updated points balance\r\n      \"balance\": 84\r\n    },\r\n    \"badges\": [\r\n      {\r\n        # Reward id\r\n        \"_id\"    : \"52a01b67cc7df72c79000003\",\r\n        # Number of times this reward was earned by this player\r\n        \"count\" : 1,\r\n        # Badge definition\r\n        \"badge\" : {\r\n          # Badge id\r\n          \"_id\"          : \"529fff2356ce248366000006\"\r\n          # Badge custom id you have defined, null otherwise\r\n          \"reference_id\" : \"deloitte-newbie-badge\"\r\n          # badge name\r\n          \"name\"         : \"Deloitte Newbie\"\r\n          # badge hint\r\n          \"hint\"         : \"Check-in 2 times at Deloitte\"\r\n          # badge unlock message\r\n          \"message\"      : \"Whooa! Look like you are new in da place. keep the effort and you will be rewarded.\"\r\n        }\r\n      },\r\n      # ...\r\n     ],\r\n    \"leaderboards\": [\r\n      {\r\n         # The updated leaderboard\r\n         \"leaderboard\" : {\r\n           \"_id\" : \"529fff1156ce248366000006\",\r\n           \"reference_id\" : \"test-lb\"\r\n         },\r\n         # Player's position before the update\r\n         \"prev_position\" : 5,\r\n         # Player's position after the update\r\n         \"post_position\" : 2,\r\n         # Player's updated score\r\n         \"score\" : 435\r\n      },\r\n\r\n      level: {\r\n        // Current level name\r\n        name: 'Newbie',\r\n        // Current level description message\r\n        message: 'You are ...',\r\n        // Url to level icon\r\n        icon: 'https://url-to-icon',\r\n        // Number of total points required to reach the next level\r\n        nextLevelPoints: '100',\r\n        // Progress percentile to the next level\r\n        progress: 88.00\r\n      }\r\n      # ...\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n* **data.points** contains 2 attributes: ``earned`` and ``balance``. ``earned`` is the points that the player has earned by performing the behaviour and ``earned`` is the updated points balance.\r\n* **data.level**  contains the current level information of the player, name, progress etc. If levelling system is disabled it will be `null` instead.\r\n* **data.badges** is an array that contains the Badges that the user has just unlocked.\r\n* **data.leaderboards** is an array that contains leaderboard updates if any. An leaderboard update contains info about the updated score, the previous position (before the tracking) and the post position (after the tracking).\r\n\r\n## Leaderboards\r\n\r\n**Note:** If you want to test you leaderboard results, you can directly use [the built-in simulator](http://dashboard.behave.io/#/simulator) to test API calls.\r\n\r\n### Getting leaderboard current results\r\n\r\nYou can fetch the actual results of any leaderboard at anytime. Here is an example:\r\n\r\n* **Method:** POST\r\n* **Endpoint:** /leaderboards/:leaderboard_reference_id/results\r\n* **Parameters:**\r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| offset        | Number        | (Optional) The number of positions to skip (0 = 1st position)|\r\n| limit         | Number        | (Optional) The max number of results per page. MAXIMUM is 1000 |\r\n| max           | Number        | (Optional) The maximum position to fetch, default is 0 => None |\r\n| player_id     | String | A player's reference_id (Optional). If specified, the given player will ALWAYS appear in the results (not duplicated). It is very useful if for example you want to always include the current player in the results |\r\n| players | Array[String] | (Optional) The players to include in the results, default is null => ALL |\r\n| positions     | String        | (Optional) The way positions are calculated. Possible values are `relative` and `absolute`. `relative` will set the positions according to the players that are included in the results, `absolute` will set the positions according to all the players in the leaderboards. This is useful when for example you want to fetch the results for a player and his friends only. In this situation you could pass `relative` so that the positions are computed between friends and not between all the players in the leaderboards. |\r\n| context     | Object        | (Optional) You can segment results according to a specific context. For example, on a leaderboard with ``all-time`` timeframe, if you want to get the results of weeks 42 only you could have ``{ timestamp: '>=1381701600,<1382306400' }``. You can also use any custom key you have specified in the context when tracking behaviours using ``track()``.  **On large leaderboards this can have an impact on performances.** |\r\n\r\nExample:\r\n\r\n```bash\r\n$ curl http://api.behave.io/leaderboards/my-leaderboard/results\r\n-H \"X-Behave-Api-Token:YOUR_API_TOKEN\"\r\n-H \"Content-Type:application/json\"\r\n-F '{\r\n  \"max\": 2,\r\n  \"player_id\": \"48\"\r\n}'\r\n\r\n# Example Response\r\n[\r\n  {\r\n    \"score\" : 129,\r\n    \"position\" : 1,\r\n    \"player\" : {\r\n      \"_id\" : \"529fe03ecbd86b9d6c000002\",\r\n      \"reference_id\" : \"42\",\r\n      \"traits\" : {\r\n        \"name\"  : 'Olivier Thierry'\r\n        \"email\" : 'olivier@behave.io'\r\n      },\r\n      \"identities\" : {\r\n         \"facebook\" : 12323\r\n      }\r\n    }\r\n  },\r\n  {\r\n    \"score\" : 102,\r\n    \"position\" : 2,\r\n    \"player\" : {\r\n      \"_id\" : \"947pg03ecbd86b9d6c05520\",\r\n      \"reference_id\" : \"43\",\r\n      \"traits\" : {\r\n        \"name\"  : \"Olivier Jeandel\"\r\n        \"email\" : \"jide@behave.io\"\r\n      },\r\n      \"identities\" : {\r\n         \"facebook\" : 5435\r\n      }\r\n    }\r\n  },\r\n  {\r\n    \"score\" : 12,\r\n    \"position\" : 54,\r\n    \"player\" : {\r\n      \"_id\" : \"724pg03ecbd86b9d6c05522\",\r\n      \"reference_id\" : \"48\",\r\n      \"traits\" : {\r\n        \"name\"  : \"Foo Bar\"\r\n        \"email\" : \"foo@bar.com\"\r\n      },\r\n      \"identities\" : {\r\n         \"facebook\" : 31245\r\n      }\r\n    }\r\n  },\r\n]\r\n```\r\n\r\n### Getting leaderboard results for a specific player\r\n\r\nYou can also fetch results for a particular player. Let's say you want to fetch the results of a player on one, many or even ALL the leaderboards **the player is in** then you can use this service to do so.\r\n\r\n* **Method:** POST\r\n* **Endpoint:** /leaderboards/player-results\r\n* **Parameters:** \r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| player_id  | String | (**Required**) The player to fetch results from  |\r\n| leaderboards  | Array[String] | (**Optional**) Leaderboards to process, if empty all the leaderboards will be processed.  |\r\n| max           | Number        | (**Optional**) The maximum player position acceptance for the leaderboard to be selected.  |\r\n\r\n```bash\r\n$ curl http://api.behave.io/leaderboards/player-results\r\n-H \"X-Behave-Api-Token:YOUR_API_TOKEN\"\r\n-H \"Content-Type:application/json\"\r\n-F '{\r\n  \"player_id\" : \"43\",\r\n  \"leaderboard\" : [\"leaderboard1\", \"leaderboard2\"]\r\n}'\r\n\r\n# Example Response\r\n[\r\n  {\r\n     \"leaderboard\" : {\r\n        \"_id\" : \"529fff1156ce248366000006\",\r\n        \"reference_id\" : \"leaderboard1\"\r\n     },\r\n     # Player's position\r\n     \"position\" : 2,\r\n     # Player's updated score\r\n     \"score\" : 435\r\n  },\r\n  {\r\n     \"leaderboard\" : {\r\n        \"_id\" : \"876fff1156ce248366000367\",\r\n        \"reference_id\" : \"leaderboard2\"\r\n     },\r\n     \"position\" : 18,\r\n     \"score\" : 114\r\n  }\r\n]\r\n```\r\n\r\n### Creating a Leaderboard\r\n\r\n**Note:** You can manage your leaderboards directly [from the dashboard](http://dashboard.behave.io/#/leaderboards). In case your app needs to dynamically create leaderboards you can use the API to do so.\r\n\r\n* **Method:** POST\r\n* **Endpoint:** /leaderboards\r\n* **Parameters:**\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| -----:|\r\n| type        | Number | (Optional) - Available values are ``0`` (score) and ``1`` (behavioural). Default is 0 |\r\n| scoreType  | Number |  (Optional) - You can specify how the scores are computed, ``1`` will increment scores, ``0`` will keep the maximum score for a player and discard the other ones. Note that for a leaderboard with type ``1`` (behavioural), the scoring type will always be ``1`` (sum) |\r\n| timeFrame  | Number | (Optional) - Specify how often the leaderboard should be reset. Possible values are: ``0`` (All time), ``1`` (Daily), ``2`` (Weekly), ``3`` (Monthly). Default to ``0`` (All time) |\r\n| rewards  | Array[Object] | Rewards for that leaderboard. See bellow for example. (Optional) |\r\n| metadata  | Object | Metadata are used if you want to keep track of some application-logic related data. (Optional)  |\r\n| active  | Boolean | Is the leaderboard active? Default to true |\r\n\r\nExample:\r\n\r\n```bash\r\n$ curl http://api.behave.io/leaderboards\r\n-H \"X-Behave-Api-Token:YOUR_API_TOKEN\"\r\n-H \"Content-Type:application/json\"\r\n-F '{\r\n  \"name\"         : \"Influencers Leaderboard\",\r\n  \"type\"         : 0,      # 0 = score leaderboard (!= behavioural leaderboard)\r\n  \"scoreType\"    : 0       # 0 = absolute score (we keep the maximum score)\r\n  \"timeFrame\"    : 2,      # Weekly leaderboard\r\n  \"active\"       : \"true\"  # Defaults\r\n  \"metadata\"     : [\r\n    \"foo\" : \"bar\",\r\n    \"custom_data\" : \"goes here\"\r\n  ]\r\n}'\r\n```\r\n\r\n### Creating a leaderboard with rewards\r\n\r\nYou can also bind rewards to a leaderboard (So it becomes a contest).\r\nRewards are Badges. Each reward defines the position in the leaderboard to who this rewards should be given and the Badge that it refers to.\r\n\r\nYou can define contest leaderboard this way.\r\n\r\n```bash\r\n$ curl http://api.behave.io/leaderboards\r\n-H \"X-Behave-Api-Token:YOUR_API_TOKEN\"\r\n-H \"Content-Type:application/json\"\r\n-F '{\r\n  \"name\"         : \"Influencers Leaderboard\",\r\n  \"type\"         : 0,      # 0 = score leaderboard (!= behavioural leaderboard)\r\n  \"scoreType\"    : 0       # 0 = absolute score (we keep the maximum score)\r\n  \"timeFrame\"    : 2,      # Weekly leaderboard\r\n  \"active\"       : \"true\",  # Defaults\r\n  \"rewards\"      : [{\r\n    \"position\" : 1, \r\n    \"badge\" : \"some-custom-id-or-original-id-of-the-badge\"\r\n  }],\r\n  \"metadata\"     : [\r\n    \"foo\" : \"bar\",\r\n    \"custom_data\" : \"goes here\"\r\n  ]\r\n}'\r\n```\r\n\r\n### Deleting a leaderboard\r\n\r\nYou can delete a leaderboard at anytime. **THIS ACTION CANNOT BE UNDONE**\r\n\r\n* **Method:** DELETE\r\n* **Endpoint:** /leaderboards/:leaderboard_reference_id\r\n\r\n```bash\r\n$ curl http://api.behave.io/leaderboards/my-leaderboard\r\n-X DELETE\r\n-H \"X-Behave-Api-Token:YOUR_API_TOKEN\"\r\n-H \"Content-Type:application/json\"\r\n```\r\n\r\n## Badges\r\n\r\n### Creating a Badge\r\n\r\n* **Method:** POST\r\n* **Endpoint:** /badges\r\n* **Parameters:**\r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| name  | String | **(Required)** The name of the badge  |\r\n| reference_id  | String | **(Required)** The reference_id or id of the badge  |\r\n| icon  | String | **(Required)** The url to the badge icon image (e.g: http://path-to-image.png)  |\r\n| group  | String | **(Optional)** The name or id of the group. If the group doesn't exists it will be created automatically  |\r\n| message  | String | **(Optional)** The congratulation message for unlocking the badge  |\r\n| hint  | String | **(Optional)** The hint for how to unlock the badge (e.g: http://path-to-image.png)  |\r\n| unique  | Boolean | **(Optional)** Default to true. Can this badge be unlocked only once per player?  |\r\n| limit  | Integer | **(Optional)** Default to 0 (infinity). How many times can this badge be unlocked?  |\r\n| metadata  | Object | **(Optional)** Metadata are used if you want to keep track of some application-logic related data. (Optional)  |\r\n| active  | Boolean | **(Optional)** Default to true. Can this badge be unlocked now  |\r\n\r\nExample:\r\n\r\n```bash\r\n$ curl http://api.behave.io/badges\r\n-X POST\r\n-H \"X-Behave-Api-Token:YOUR_API_TOKEN\"\r\n-H \"Content-Type:application/json\"\r\n-f '{\r\n  \"name\": \"My Awesome Badge\",\r\n  \"reference_id\": \"my-awesome-badge\",\r\n  \"group\": \"limited-edition\",\r\n  \"message\": \"The congratulation message\",\r\n  \"hint\": \"How to unlock this badge?\",\r\n  \"limit\": 42,\r\n  \"unique\": true,\r\n  \"active\": true,\r\n  \"metadata\": {\r\n    \"foo\": \"bar\"\r\n  }\r\n}'\r\n```\r\n\r\n### Updating a Badge\r\n\r\n* **Method:** PUT\r\n* **Endpoint:** /badges/:badge_id_or_reference_id\r\n* **Parameters:**\r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| name  | String | **(Optional)** The name of the badge  |\r\n| reference_id  | String | **(Optional)** The reference_id or id of the badge  |\r\n| icon  | String | **(Optional)** The url to the badge icon image (e.g: http://path-to-image.png)  |\r\n| group  | String | **(Optional)** The name or id of the group. If the group doesn't exists it will be created automatically  |\r\n| message  | String | **(Optional)** The congratulation message for unlocking the badge  |\r\n| hint  | String | **(Optional)** The hint for how to unlock the badge (e.g: http://path-to-image.png)  |\r\n| unique  | Boolean | **(Optional)** Default to true. Can this badge be unlocked only once per player?  |\r\n| limit  | Integer | **(Optional)** Default to 0 (infinity). How many times can this badge be unlocked?  |\r\n| metadata  | Object | **(Optional)** Metadata are used if you want to keep track of some application-logic related data. (Optional)  |\r\n| active  | Boolean | **(Optional)** Default to true. Can this badge be unlocked now  |\r\n\r\nExample:\r\n\r\n```bash\r\n$ curl http://api.behave.io/badges/my-awesome-badge\r\n-X PUT\r\n-H \"X-Behave-Api-Token:YOUR_API_TOKEN\"\r\n-H \"Content-Type:application/json\"\r\n-f '{\r\n  \"active\": false\r\n}'\r\n```\r\n\r\n### Deleting a Badge\r\n\r\n* **Method:** DELETE\r\n* **Endpoint:** /badges/:badge_id_or_reference_id\r\n\r\nExample:\r\n\r\n```bash\r\n$ curl http://api.behave.io/badges/my-awesome-badge\r\n-X DELETE\r\n-H \"X-Behave-Api-Token:YOUR_API_TOKEN\"\r\n```\r\n\r\n### Getting unlocked badges of a player\r\n\r\n* **Method:** GET\r\n* **Endpoint:** /players/:player_reference_id/badges\r\n\r\n```bash\r\n$ curl http://api.behave.io/players/42/badges\r\n-H \"X-Behave-Api-Token:YOUR_API_TOKEN\"\r\n\r\n# Example Response\r\n{\r\n  \"data\": [\r\n    {\r\n      # Reward id\r\n      \"_id\": \"530007cf0af9fbcf2d58e779\",\r\n\r\n      # Reward owner (the player)\r\n      \"player\": \"530006e4f27bfdb92dc3eac1\",\r\n\r\n      # Last time the badge was unlocked (unix timestamp)\r\n      \"lastUnlockedAt\": 1392510927,\r\n\r\n      # The number of times this badges has been unlocked by this player\r\n      \"count\": 1\r\n\r\n      # The reward's badge \r\n      \"badge\": {\r\n        # Badge id\r\n        \"_id\": \"52b83490739f878842000014\",\r\n        \r\n        # Is the badge active?\r\n        \"active\": true,\r\n\r\n        # Current app\r\n        \"app_id\": \"52b0f1d32e2ce4e91100000c\",\r\n\r\n        # Badge Hint\r\n        \"hint\": \"Trouvez 1 mot en moins de 7 secondes.\",\r\n\r\n        # Badge Icon\r\n        \"icon\": \"https://s3-eu-west-1.amazonaws.com/behave-production/uploads/9d05563b89934f615951bc6425f029e6.png\",\r\n\r\n         # The limit of unlocks that can be done (e.g limit of 10 means that maximum 10 players can unlock the badge)        \r\n        \"limit\": 0,\r\n\r\n        \"localization\": {\r\n          \"fr_FR\": {\r\n            \"message\": \"Moins de 7 secondes pour 1 mot est un challenge ! Bravo.\",\r\n            \"hint\": \"Trouvez 1 mot en moins de 7 secondes.\",\r\n            \"name\": \"Flash Gordon\",\r\n            \"is_default\": false\r\n          },\r\n          \"en_US\": {\r\n            \"is_default\": true\r\n          }\r\n        },\r\n\r\n        # Badge message (when unlocked)\r\n        \"message\": \"Vous l'avez fait ! Moins de 7 secondes pour 1 mot est un challenge ! Bravo.\",\r\n\r\n        # Badge name\r\n        \"name\": \"Flash Gordon\",\r\n\r\n        # Badge reference_id\r\n        \"reference_id\": \"flash-gordon\",\r\n\r\n        # Badge social bindings (OpenGraph) if enabled from the dashboard\r\n        \"social\": {\r\n          \"facebook\": {\r\n            \"ogType\": \"pics-n-words:badge\",\r\n            # Badge id in the facebook opengraph\r\n            \"ogId\": \"775995212414594\"\r\n          }\r\n        },\r\n\r\n        # Is the badge unique? (can be unlocked once per player)\r\n        \"unique\": true\r\n      }\r\n    },\r\n    # ...\r\n```\r\n\r\n### Getting locked badges of a player\r\n\r\n* **Method:** GET\r\n* **Endpoint:** /players/:player_reference_id/badges/todo\r\n\r\n```bash\r\n$ curl http://api.behave.io/players/42/badges/todo\r\n-H \"X-Behave-Api-Token:YOUR_API_TOKEN\"\r\n\r\n# Example Response\r\n{\r\n  \"data\": [\r\n    {\r\n      # Badge id\r\n      \"_id\": \"52b838c8739f87884200001c\",\r\n\r\n      # Current app id\r\n      \"app_id\": \"52b0f1d32e2ce4e91100000c\",\r\n\r\n      # Badge Hint\r\n      \"hint\": \"Watch a video trailer in the shop\",\r\n\r\n      # Badge Icon\r\n      \"icon\": \"https://s3-eu-west-1.amazonaws.com/behave-production/uploads/6827c5d570dece337c123fcf9447abf7.png\",\r\n\r\n      # Badge message (when unlocked)\r\n      \"message\": \"Yeah! You like trailers and mobile games but do you like words?!\",\r\n\r\n      # Badge name\r\n      \"name\": \"Trailer lover\",\r\n\r\n      # Badge reference_id\r\n      \"reference_id\": \"trailer-lover\",\r\n\r\n      # Badge localizations (if enabled from the dashboard)\r\n      \"localization\": {\r\n        \"fr_FR\": {\r\n          \"message\": \"Vous aimez les vidéos et les apps mais aimez-vous les mots ?\",\r\n          \"hint\": \"Regardez une video depuis la boutique.\",\r\n          \"name\": \"Trailer lover\",\r\n          \"is_default\": false\r\n        },\r\n        \"en_US\": {\r\n          \"is_default\": true\r\n        }\r\n      },\r\n\r\n      # Badge social bindings (OpenGraph) if enabled from the dashboard\r\n      \"social\": {\r\n        \"facebook\": {\r\n          \"ogType\": \"pics-n-words:badge\",\r\n          # Badge id in the facebook opengraph\r\n          \"ogId\": \"1413403995564661\"\r\n        }\r\n      },\r\n\r\n      # Is the badge active?\r\n      \"active\": true,\r\n\r\n      # Is the badge unique? (can be unlocked once per player)\r\n      \"unique\": true,\r\n\r\n      # The limit of unlocks that can be done (e.g limit of 10 means that maximum 10 players can unlock the badge)\r\n      \"limit\": 0\r\n    },\r\n    # ...\r\n  ]\r\n}\r\n```\r\n\r\n## Creating badges, levels, leaderboards directly using the API\r\n\r\nIf you need to dynamically manage your badges, levels, leaderboards and more without directly using the Dashboard interface, please <a href=\"mailto:founders@behave.io\" target=\"_blank\">let us know!</a> **We will grant you access to the API.**","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}